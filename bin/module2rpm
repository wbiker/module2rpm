#!/usr/bin/env raku
use File::Temp;
use Config::Clever;
use Cro::HTTP::Client;
use JSON::Fast;
use Logger;

use lib $*PROGRAM.parent.sibling('lib');

use Module2Rpm::Download::Git;
use Module2Rpm::Archive::Tar;
use Module2Rpm::Metadata;
use Module2Rpm::Package;
use Module2Rpm::Helper;
use Module2Rpm::Upload::OBS;
use Module2Rpm::Cro::Client;

my %*SUB-MAIN-OPTS =
  :named-anywhere,    # allow named parameters after positional ones
;

# my $log = Logger.new(formatter => -> $dt { sprintf "%sT%s", .dd-mm-yyyy, .hh-mm-ss given $dt });
my $log = Logger.new;
Logger.add($log);

my $helper = Module2Rpm::Helper.new;

# Place where all source archives and build files will be saved before uploading.
my $destination-path = tempdir().IO;

# Load config from home folder: HOME/.config/module2rpm/default.json
my $config-dir = $*HOME.add('.config');
$config-dir.mkdir unless $config-dir.e;
$config-dir .= add('module2rpm');
$config-dir.mkdir unless $config-dir.e;

my $config-file = $config-dir.add('default.json');
unless $config-file.e {
    $log.info("Config does not exists. Create $config-file");
    my %new-config;
    %new-config<obs-user> = prompt "Enter OBS user: ";
    %new-config<obs-password> = prompt "Enter OBS password: ";
    my $project = "home:{%new-config<obs-user>}";
    %new-config<obs-project> = prompt "Enter OBS project: ($project)";
    %new-config<obs-project> = $project unless %new-config<obs-project>;

    $config-file.spurt(to-json(%new-config));
}

$log.info("Load config: $config-dir");
my %config = Config::Clever.load(config-dir => $config-dir);
# Config for Open Build Service.
# User using the OBS API: https://api.opensuse.org
my $obs-user = %config<obs-user>;
# Password for the OBS user:
my $obs-password = %config<obs-password>;
# Project to upload the modules to:
my $obs-project = %config<obs-project>;

my $client = Module2Rpm::Cro::Client.new(auth => {
    username => $obs-user,
    password => $obs-password
});

#| Prints the help.
multi MAIN(:h(:$help)) {
    help();
}

#| Downloads, creates build files and uploads them to OBS for all modules given in a file.
multi MAIN(:$file!, Bool :$debug, Bool :$dryrun) {
    $log.level = Logger::DEBUG if $debug;
    $log.info("Parse download file: $file");
    my @packages = $helper.create-packages(path => $destination-path, file => $file.IO);

    for @packages -> $package {
        $log.info("{$package.get-name()}: Download source...");
        try {
            $package.Download();

            CATCH { default { $log.info($_.gist); next; }}
        }
        $log.info("{$package.get-name()}: Write build files...");
        $package.write-build-files();

        my $obs = Module2Rpm::Upload::OBS.new(client => $client, project => $obs-project);
        $log.info("Upload {$package.get-name()} to OBS");
        $obs.upload-files(package => $package) unless $dryrun;
    }
}

#| Downloads, creates build files and uploads to OBS a given module.
multi MAIN(:$module!, Bool :$debug, Bool :$dryrun, :$dir) {
    $log.level = Logger::DEBUG if $debug;
    $log.info("Fetch module metadata...");
    my %all-metadata = $helper.fetch-metadata();

    my $module-metadata = %all-metadata{$module};
    die "Did not find metadata for module '$module'" unless $module-metadata;

    my $metadata = Module2Rpm::Metadata.new(metadata => $module-metadata);
    my $package = Module2Rpm::Package.new(metadata => $metadata, path => $destination-path);

    $log.info("Download module source...");
    $dir.IO.mkdir if $dir and not $dir.IO.e;
    $package.Download($dir);

    $log.info("Write build files...");
    $package.write-build-files();

    unless $dryrun {
        my $obs = Module2Rpm::Upload::OBS.new(client => $client, project => $obs-project);

        $log.info("Upload module to OBS");
        $obs.upload-files(package => $package);
    }
    $log.info("Done");
}

#| Creates build files and uploads to OBS in the current working directory
multi MAIN('.', Bool :$debug, Bool :$dryrun) {
    $log.level = Logger::DEBUG if $debug;
    if not 'META6.json'.IO.e {
        note "META6.json not found in current directory" and exit;
    }

    my $module-metadata = from-json('META6.json'.IO.slurp);

    my $metadata = Module2Rpm::Metadata.new(metadata => $module-metadata);
    my $package = Module2Rpm::Package.new(metadata => $metadata, path => $destination-path);

    $package.set-readme($*CWD);
    $package.set-license-file($*CWD);
    $package.set-build-file($*CWD);

    $log.info("Write build files...");
    $package.write-build-files();

    # Before creating the tar archive, copy the current working directory content to a new
    # folder with the name and version of the module. Otherwise the tar archive content is
    # not the right one and building fails.
    my $tmpdir = tempdir().IO;
    $log.debug("Created temp dir for tar archive content: '$tmpdir'");
    my $dest-tmp-dir = $tmpdir.add($package.module-name-with-version);
    $dest-tmp-dir.mkdir;

    $log.debug("Copy files to '$dest-tmp-dir'");
    my @provides = $metadata.metadata<provides>.values;
    @provides.push: 'META6.json';
    @provides.push: 'LICENSE';
    recursive-copy(@provides, $dest-tmp-dir);

    $log.info("Create tar archive...");
    $package.compress($dest-tmp-dir);

    unless $dryrun {
        my $obs = Module2Rpm::Upload::OBS.new(client => $client, project => $obs-project);

        $log.info("Upload module to OBS");
        $obs.upload-files(package => $package);
    }
    $log.info("Done");
}

sub recursive-copy(@provides, IO::Path $destination) {
    for @provides -> IO() $file {
        my @dir-names = $file.parts.dirname.split($file.SPEC.dir-sep);
        my $dest = $destination;
        for @dir-names -> $dir-name {
            $dest = $dest.add($dir-name);
            next if $dest.e;

            $log.debug("Create sub directory: '$dir-name'");
            $dest.mkdir;
        }

        $log.debug("Copy $file");
        $file.copy($dest.add($file.basename));
    }
}

sub help() {
    say q:to/HELP/;
    module2rpm --module=module::name | --file=filePath | '.' [--debug]

    This program downloads the source of a Raku module, writes the build files
    with the metadata and uploads both files to OBS.

    OPTIONS:
        --module=module::name   Looks for the module::name in the Raku
                                ecosystem to get the metadata of it. Then write
                                the build files and uploads the module source and
                                build files to OBS.
        --file=filePath         Expect a file with either Module::Names or
                                metadata urls. Download the sources and
                                uploaded them together with the build files to
                                OBS.
        '.'                     Creates the build files and tar archive with the current
                                working directory.
        --debug                 Sets DEBUG logging level
        --dryrun                Creates build files and tar file but do not upload it to OBS.
    HELP
}
